package prepare;

import org.junit.Test;

public class class03 {
    /*
    运算：
    参数传递：
    Java的参数是以值传递的形式传入方法中，而不是引用传递；
    精辟：
    《在将一个参数传入方法时，本质上是将对象的地址以值的方式传递到形参中。》
     */
    /*
    java不能隐式执行向下转型
     */
    @Test
    public void test() {
//        float f = 1.1;//报错，reason:1.1字面量为double
        float f = 1.1f;//正确
    }
    /*
    switch
    java7开始：可以在switch条件判断语句中使用String对象；
    switch不支持long,float,double;
     */

    /*
    关键字：
    final{
        1.数据
            基本类型：数值不变
            引用类型：引用不变，但引用的对象本身可修改
        2.方法
            方法不能被子类重写
            private方法隐式地被指定为final，如果在子类中定义的方法和基类中的一个private方法签名相同，
            此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。
        3.类
            声明类不允许被继承
    }
    static{
        1.静态变量
            静态变量：又称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它；
            静态变量在内存中只存在一份。
        2.静态方法
            静态方法在类加载的时候就存在，不依赖于任何实例。
            静态方法必须有实现，不能是抽象方法。
            只能访问所属类的静态字段和静态方法，方法中不能有this和super关键字，这两个关键字与具体对象关联。
        3.静态语句块
            在类初始化时运行一次。
        4.静态内部类
            非静态内部类依赖于外部类的实例，需要先创建外部类实例才能用这个实例去创建非静态内部类，而静态内部类不需要。
        5.静态导包
            在使用静态方法时不用再指明ClassName，但可读性降低
        6.初始化顺序
            静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于他们在代码中的顺序。

            在存在继承的情况下，初始化顺序为：
            1.父类（静态变量、静态语句块）
            2.子类（静态变量、静态语句块）
            3.父类（实例变量、普通语句块）
            4.父类（构造函数）
            5.子类（实例变量、普通语句块）
            6.子类（构造函数）
    }
     */
}
